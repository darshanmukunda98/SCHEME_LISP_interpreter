////nested binary operators test
(+ 5 (- 3 (* 3 (/ 4 2))))
'(remainder 16 3)'
////define variable, cons and append test
(define L1 (cons 5 1))
(define k 37)
(define newList (append L1 k))
L1
k
newList
(car newList)
(cdr newList)
// ////boolean tests
'(list? (list 3 4 5))'             //true
'(list? 12)'                       //false
'(eq? (list 3 4 5) (list 3 4 5))' //true
'(eq? (list 3 4 5) (list 3 5 5))' //false
'(equal? (+ 99 1)(+ 54 46))'     //true
'(equal? (+ 99 1)(+ 54 9810))'    //false
'(= 15 (- 18 3))'                 //true
'(= 15000 (* 13 6))'              //false
// ////map, apply tests
'(map (lambda(x)(* x 3)) (list 1 2 3))'
'(apply * (list 5 10))'
////procedure creation
'(define double (lambda(x) (* x 2 )))'
'(double 9)'
// ////if test
'(if (= 5 (+ 3 2)) 0 1)'
// ////set! and begin test
'(begin(define x 12) (display x))'
'(begin (set! x 2) (display x))'
// ////quote test
'(quote 15)'



function para (input) { 
let open=0,closed=0
 let arr = []
 for(let i=0;i<input.length;i++)
 {
 if(input[i] =='(')
 arr.push('( '+ open++)
 if(input[i]==')'){
arr.push(') '+ --open)

 }
 

 }
 
 return arr
 }

function para (input) { 
let open=0;let closed=0;
 let arr = []
 let 
 for(let i=0;i<input.length;i++)
 {
 if(input[i] =='(') arr.push('( '+ open++)
 if(input[i]==')') arr.push(') '+ closed++)
 if(open === closed) breaker = i
 }
 console.log(breaker)
 return arr
}


